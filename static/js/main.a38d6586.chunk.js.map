{"version":3,"sources":["FakeBlock.js","dataItem.js","App.js","reportWebVitals.js","index.js"],"names":["FakeBlock","props","speed","width","height","viewBox","backgroundColor","foregroundColor","x","y","rx","ry","DataItem","county","value","className","App","React","useState","data","setData","isLoaded","setLoading","getData","a","Promise","resolve","reject","fetch","then","res","json","catch","err","console","log","useEffect","setTimeout","Array","fill","map","el","index","base","timestamp","Object","keys","rates","key","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2PAiBeA,EAdG,SAACC,GAAD,OAChB,cAAC,IAAD,yBACEC,MAAO,EACPC,MAAO,IACPC,OAAQ,IACRC,QAAQ,aACRC,gBAAgB,UAChBC,gBAAgB,WACZN,GAPN,aASE,sBAAMO,EAAE,IAAIC,EAAE,IAAIC,GAAG,IAAIC,GAAG,IAAIR,MAAM,MAAMC,OAAO,WCDxCQ,EAVE,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,OAAQC,EAAY,EAAZA,MAC1B,OACE,sBAAKC,UAAU,kBAAf,UACE,mBAAGA,UAAU,gBAAb,SAA8BF,IAC9B,mBAAGE,UAAU,cAAb,SAA4BD,QC6CnBE,MA9Cf,WAAgB,IAAD,EACWC,IAAMC,SAAS,IAD1B,mBACNC,EADM,KACAC,EADA,OAEkBH,IAAMC,UAAS,GAFjC,mBAENG,EAFM,KAEIC,EAFJ,KAIPC,EAAO,uCAAG,sBAAAC,EAAA,sDACdF,GAAW,GACM,IAAIG,SAAQ,SAACC,EAASC,GACrCC,MAAM,aACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAC,GAAG,OAAIJ,EAAQI,MACpBE,OAAM,SAAAC,GAAG,OAAIN,EAAOM,SAGhBJ,MAAK,SAAAC,GAAuB,OAAdV,EAAQU,GAAaR,GAAW,MAAUU,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,MAT5E,2CAAH,qDAgBb,OAJAhB,IAAMmB,WAAU,WACdC,WAAWd,EAAS,OACnB,IAGD,qBAAKR,UAAU,YAAf,SACE,sBAAKA,UAAU,UAAf,UACE,mCAEEM,EACI,qCACA,iDACA,qBAAKN,UAAU,kBAAf,SACGuB,MAAM,GAAGC,KAAK,GAAGC,KAAI,SAACC,EAAIC,GAAL,OAAe,cAAC,EAAD,GAAgBA,WAIvD,qCACA,wCAAU,sBAAM3B,UAAU,gBAAhB,SAAiCI,EAAKwB,UAChD,6CAAgBxB,EAAKyB,aACrB,qBAAK7B,UAAU,kBAAf,SACG8B,OAAOC,KAAK3B,EAAK4B,OAAOP,KAAI,SAAAQ,GAAG,OAAI,cAAC,EAAD,CAAoBnC,OAAQmC,EAAKlC,MAAOK,EAAK4B,MAAMC,IAApCA,iBC9BpDC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBtB,MAAK,YAAkD,IAA/CuB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.a38d6586.chunk.js","sourcesContent":["import ContentLoader from \"react-content-loader\"\nimport './App.css';\n\nconst FakeBlock = (props) => (\n  <ContentLoader\n    speed={2}\n    width={300}\n    height={100}\n    viewBox=\"0 0 300 80\"\n    backgroundColor=\"#f3f3f3\"\n    foregroundColor=\"#ecebeb\"\n    {...props}\n  >\n    <rect x=\"0\" y=\"0\" rx=\"7\" ry=\"7\" width=\"300\" height=\"80\" />\n  </ContentLoader>\n)\n\nexport default FakeBlock;\n\n","import './App.css';\n\nconst DataItem = ({ county, value }) => {\n  return (\n    <div className='block-container'>\n      <p className=\"block-country\">{county}</p>\n      <p className=\"block-value\">{value}</p>\n\n    </div>\n  )\n}\n\nexport default DataItem\n","import React from 'react';\nimport FakeBlock from './FakeBlock';\nimport './App.css';\nimport DataItem from './dataItem';\n\nfunction App() {\n  const [data, setData] = React.useState({});\n  const [isLoaded, setLoading] = React.useState(true);\n\n  const getData = async () => {\n    setLoading(true)\n    const promise1 = new Promise((resolve, reject) => {\n      fetch('data.json')\n        .then(res => res.json())\n        .then(res => resolve(res))\n        .catch(err => reject(err));\n    });\n\n    promise1.then(res => { setData(res); return setLoading(false) }).catch(err => console.log(err));\n  };\n\n  React.useEffect(() => {\n    setTimeout(getData, 2000);\n  }, []);\n\n  return (\n    <div className=\"container\">\n      <div className=\"content\">\n        <h1> </h1>\n        {\n          isLoaded\n            ? <>\n              <h1>Loading data...</h1>\n              <div className=\"items-container\">\n                {Array(9).fill(0).map((el, index) => <FakeBlock key={index} />)}\n              </div>\n\n            </>\n            : <>\n              <h3>BASE: <span className=\"orange-dotted\">{data.base}</span></h3>\n              <h3>TIMESTAMP: {data.timestamp}</h3>\n              <div className=\"items-container\">\n                {Object.keys(data.rates).map(key => <DataItem key={key} county={key} value={data.rates[key]} />)}\n              </div>\n            </>\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}